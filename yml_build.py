#!/usr/bin/env python3
import os, csv, sys, urllib.request, xml.etree.ElementTree as ET
from io import StringIO
from datetime import datetime

# –§—ñ–∫—Å–æ–≤–∞–Ω—ñ URL
SHEET_URL = "https://docs.google.com/spreadsheets/d/1gq1c4L2TEyRmxNpbRGHJdSNYtd2FNgOMi9-a1CX5ZDQ/export?format=csv&gid=401593410"
OUT_FILE = "USAllParts.yml"

def sanitize_text(text):
    if not text:
        return ""
    return str(text).strip()

def load_categories():
    """–°—Ç–≤–æ—Ä—é—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–∏—Ä–æ–±–Ω–∏–∫—ñ–≤"""
    categories = {
        "0": "–ê–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏–Ω–∏",
        "1": "MITSUBISHI",
        "2": "TOYOTA", 
        "3": "HONDA",
        "4": "NISSAN",
        "5": "MAZDA",
        "6": "SUBARU",
        "7": "HYUNDAI",
        "8": "KIA",
        "9": "FORD",
        "10": "CHEVROLET",
        "11": "DODGE",
        "12": "CHRYSLER",
        "13": "JEEP",
        "14": "BMW",
        "15": "MERCEDES",
        "16": "AUDI",
        "17": "VOLKSWAGEN",
        "18": "VOLVO",
        "19": "SAAB",
        "20": "LEXUS",
        "21": "ACURA",
        "22": "INFINITI",
        "23": "CADILLAC",
        "24": "LINCOLN",
        "25": "BUICK",
        "26": "PONTIAC",
        "27": "OLDSMOBILE",
        "28": "SATURN",
        "29": "ISUZU",
        "30": "SUZUKI",
        "31": "DAIHATSU",
        "32": "–Ü–Ω—à—ñ –≤–∏—Ä–æ–±–Ω–∏–∫–∏"
    }
    
    print(f"üìã –°—Ç–≤–æ—Ä–µ–Ω–æ {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–∏—Ä–æ–±–Ω–∏–∫—ñ–≤")
    return categories

def load_products(url, categories):
    print(f"üì¶ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é —Ç–æ–≤–∞—Ä–∏ –∑ Google Sheets...")
    with urllib.request.urlopen(url) as r: 
        txt = r.read().decode("utf-8", errors="ignore")
    rows = list(csv.reader(StringIO(txt)))
    if not rows: 
        return []
    
    headers = [h.strip().lower() for h in rows[0]]
    print(f"üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏: {headers[:8]}...")
    
    def idx(*names, d=None):
        s = {n.lower() for n in names}
        for i, h in enumerate(headers):
            if h in s: 
                return i
        return d
    
    i_code = idx("–Ω–æ–º–µ—Ä —á–∞—Å—Ç–∏–Ω–∏","–∫–æ–¥","–∞—Ä—Ç–∏–∫—É–ª","code","vendor_code", d=0)
    i_vendor = idx("–≤–∏—Ä–æ–±–Ω–∏–∫","–±—Ä–µ–Ω–¥","vendor","manufacturer", d=1)
    i_name = idx("–Ω–∞–∑–≤–∞ —á–∞—Å—Ç–∏–Ω–∏","–Ω–∞–∑–≤–∞","name","title", d=2)
    i_photos = idx("—Ñ–æ—Ç–æ","photos","pictures","images", d=3)
    i_qty = idx("–∫-—Ç—å","–∫—ñ–ª—å–∫—ñ—Å—Ç—å","quantity","qty", d=4)
    i_price = idx("—Ü—ñ–Ω–∞","price", d=5)
    i_curr = idx("–∫–æ–¥ –≤–∞–ª—é—Ç–∏","–≤–∞–ª—é—Ç–∞","currency", d=6)
    i_presence = idx("–Ω–∞—è–≤–Ω—ñ—Å—Ç—å","availability","available","is_available", d=7)
    i_category = idx("–∫–∞—Ç–µ–≥–æ—Ä—ñ—è","category","—Ç–∏–ø","type","–≥—Ä—É–ø–∞","group", d=8)
    
    need = max(i_code, i_vendor, i_name, i_photos, i_qty, i_price, i_curr, i_presence, i_category)
    products = []
    loaded = 0
    skipped = 0
    
    for r in rows[1:]:
        if len(r) <= need: 
            r += [""] * (need - len(r) + 1)
        
        code = sanitize_text(r[i_code])
        name = sanitize_text(r[i_name])
        vendor = sanitize_text(r[i_vendor]) or "USAllParts"
        
        photos_raw = sanitize_text(r[i_photos])
        pics = [p.strip() for p in photos_raw.replace("\n"," ").replace("|",",").split(",") if p.strip()][:10]
        
        try: 
            qty = int(float(sanitize_text(r[i_qty]) or "0"))
        except: 
            qty = 0
        
        ps = sanitize_text(r[i_price]).replace(",", ".")
        try: 
            price = float(ps) if ps else None
        except: 
            price = None
        
        curr_raw = sanitize_text(r[i_curr]) or "30"
        currency = "UAH" if curr_raw == "30" else ("USD" if curr_raw == "840" else curr_raw.upper())
        
        av = sanitize_text(r[i_presence]).lower()
        presence = (av in ["true","1","yes","–≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ","–Ω–∞—è–≤–Ω–∏–π","+"]) or (qty > 0)
        
        # –ö–∞—Ç–µ–≥–æ—Ä—ñ—è —Ç–æ–≤–∞—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–∏—Ä–æ–±–Ω–∏–∫–∞
        vendor_upper = vendor.upper()
        category_id = "32"  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º "–Ü–Ω—à—ñ –≤–∏—Ä–æ–±–Ω–∏–∫–∏"
        
        for cat_id, cat_name in categories.items():
            if cat_name.upper() == vendor_upper:
                category_id = cat_id
                break
        
        if not code or not name or price is None: 
            skipped += 1
            continue
        
        products.append({
            "id": f"my_{code}",
            "name": name,
            "price": price,
            "currency": currency or "UAH",
            "description": name,
            "presence": presence,
            "quantity": qty if presence else 0,
            "pictures": pics,
            "category_id": category_id,
            "vendor": vendor,
            "vendor_code": code
        })
        loaded += 1
    
    print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {loaded} —Ç–æ–≤–∞—Ä—ñ–≤")
    print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped}")
    available = sum(1 for p in products if p['presence'])
    print(f"üìä –í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ: {available}/{loaded}")
    
    return products

def write_yml(products, categories, filename):
    print(f"üìù –ì–µ–Ω–µ—Ä—É—é YML —Ñ–∞–π–ª...")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ XML —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    root = ET.Element('yml_catalog')
    root.set('date', datetime.now().strftime('%Y-%m-%d %H:%M'))
    
    shop = ET.SubElement(root, 'shop')
    
    # –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –º–∞–≥–∞–∑–∏–Ω
    name = ET.SubElement(shop, 'name')
    name.text = 'USAllParts'
    
    company = ET.SubElement(shop, 'company')
    company.text = 'USAllParts'
    
    url = ET.SubElement(shop, 'url')
    url.text = 'https://example.com'
    
    # –í–∞–ª—é—Ç—ã
    currencies = ET.SubElement(shop, 'currencies')
    ET.SubElement(currencies, 'currency', id='UAH', rate='1')
    ET.SubElement(currencies, 'currency', id='USD', rate='38')
    
    # –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó
    categories_elem = ET.SubElement(shop, 'categories')
    for cat_id, cat_name in categories.items():
        ET.SubElement(categories_elem, 'category', id=cat_id).text = cat_name
    
    # –¢–æ–≤–∞—Ä–∏
    offers = ET.SubElement(shop, 'offers')
    
    for p in products:
        offer = ET.SubElement(offers, 'offer')
        offer.set('id', str(p['id']))
        offer.set('available', 'true' if p['presence'] else 'false')
        
        # –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
        name = ET.SubElement(offer, 'name')
        name.text = p['name']
        
        price = ET.SubElement(offer, 'price')
        price.text = str(p['price'])
        
        currency = ET.SubElement(offer, 'currencyId')
        currency.text = p['currency']
        
        category = ET.SubElement(offer, 'categoryId')
        category.text = p['category_id']
        
        # –í–∏—Ä–æ–±–Ω–∏–∫
        vendor = ET.SubElement(offer, 'vendor')
        vendor.text = p['vendor']
        
        vendor_code = ET.SubElement(offer, 'vendorCode')
        vendor_code.text = p['vendor_code']
        
        # –ö—ñ–ª—å–∫—ñ—Å—Ç—å
        stock_quantity = ET.SubElement(offer, 'stock_quantity')
        stock_quantity.text = str(p['quantity'])
        
        # –û–ø–∏—Å
        description = ET.SubElement(offer, 'description')
        description.text = p['description']
        
        # –§–æ—Ç–æ
        for pic in p['pictures']:
            picture = ET.SubElement(offer, 'picture')
            picture.text = pic
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ XML –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º
    tree = ET.ElementTree(root)
    ET.indent(tree, space="  ", level=0)
    tree.write(filename, encoding='utf-8', xml_declaration=True)
    
    print(f"üéâ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ {filename} –∑ {len(products)} —Ç–æ–≤–∞—Ä–∞–º–∏ —Ç–∞ {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏")

def main():
    print("üöÄ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä USAllParts YML")
    print("=" * 40)
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    categories = load_categories()
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç–æ–≤–∞—Ä–∏
    products = load_products(SHEET_URL, categories)
    if not products:
        print("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä—ñ–≤")
        sys.exit(1)
    
    # –ì–µ–Ω–µ—Ä—É—î–º–æ YML
    write_yml(products, categories, OUT_FILE)

if __name__ == "__main__":
    main()
